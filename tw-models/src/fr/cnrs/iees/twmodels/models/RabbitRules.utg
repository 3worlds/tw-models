treegraph // saved by OmugiGraphExporter on Tue May 24 10:40:28 CEST 2022

	edge_factory = java.lang.String(au.edu.anu.twcore.root.TwConfigFactory)
	node_factory = java.lang.String(au.edu.anu.twcore.root.TwConfigFactory)
// TREE
3worlds RabbitRules
	authors = fr.cnrs.iees.omugi.collections.tables.StringTable(([1]"Gignoux, J."))
	built-by = java.lang.String(ian (26 May 2022))
	contacts = fr.cnrs.iees.omugi.collections.tables.StringTable(([1]""))
	importSnippet = fr.cnrs.iees.omugi.collections.tables.StringTable(([4]"java.util.HashSet","static java.lang.Math.*","static fr.cnrs.iees.uit.space.Distance.*","java.util.Set"))
	precis = java.lang.String(“Rabbit Rules” is a fire spread model derived from very simple empirical rules that capture the behavioural complexity of the interactions between fire, fuels, terrain, and weather.)
	publication = fr.cnrs.iees.omugi.collections.tables.StringTable(([2]"Achtemeier, G. L. (2003). “Rabbit Rules”–An Application of Stephen Wolfram’s “New Kind of Science” to Fire Spread Modeling. Fifth Symposium on Fire and Forest Meteorology, 16–20. https://ams.confex.com/ams/pdfpapers/65944.pdf","Achtemeier, G. L. (2013). Field validation of a free-agent cellular automata model of fire spread with fire—Atmosphere coupling. International Journal of Wildland Fire, 22(2), 148. https://doi.org/10.1071/WF11055"))
	version = java.lang.String()
	predefined *categories*
		categorySet *organisation*
			category *assemblage*
			category *atomic*
		record AVEphemeral
			field birthDate
				interval = fr.cnrs.iees.omhtk.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
				description = java.lang.String(creation time of an ephemeral entity)
			field age
				interval = fr.cnrs.iees.omhtk.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
				description = java.lang.String(time since creation of an ephemeral entitiy)
		record AVPopulation
			field count
				range = au.edu.anu.omhtk.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(#)
				description = java.lang.String(the number of ephemeral entities)				
			field nRemoved
				range = au.edu.anu.omhtk.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(#)
				description = java.lang.String(the number of an ephemeral entities removed)				
			field nAdded
				range = au.edu.anu.omhtk.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(#)
				description = java.lang.String(the number of an ephemeral entities added)				

		relationType *returnsTo*
			lifespan = fr.cnrs.iees.twcore.constants.LifespanType(permanent)
		categorySet *systemElements*
			category *life cycle*
			category *group*
			category *relation*
			category *component*
			category *arena*
		relationType *parentTo*
			lifespan = fr.cnrs.iees.twcore.constants.LifespanType(permanent)
		categorySet *lifespan*
			category *ephemeral*
			category *permanent*
	dataDefinition dDef
		dimensioner nFuelTypes
			size = java.lang.Integer(5)
		record landCst
			dynamic = java.lang.Boolean(false)
			generatedClassName = java.lang.String(landCst)
			field Ch
				description = java.lang.String(fuel height effect on spotting distance)
				interval = fr.cnrs.iees.omhtk.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.01)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field Cf
				description = java.lang.String(slope effect on spotting distance)
				interval = fr.cnrs.iees.omhtk.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.01)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m-1 s-1)
			field nNewRabbits
				description = java.lang.String(number of new rabbits spread per time step)
				range = au.edu.anu.omhtk.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String()
			table fuelHeight
				dataElementType = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				description = java.lang.String(average fuel height per fuel type)
				interval = fr.cnrs.iees.omhtk.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.01)
				units = java.lang.String(m)
			field yMax
				description = java.lang.String(length of the landscape in the y direction)
				interval = fr.cnrs.iees.omhtk.utils.Interval(]0.0,+∞[)
				precision = java.lang.Double(0.01)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m)
			field xMax
				description = java.lang.String(length of the landscape in the y direction)
				interval = fr.cnrs.iees.omhtk.utils.Interval(]0.0,+∞[)
				precision = java.lang.Double(0.01)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m)
			field g
				description = java.lang.String(acceleration of gravity)
				interval = fr.cnrs.iees.omhtk.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.01)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m s-2)
			field cellSize
				description = java.lang.String(side length of a fuel grid cell)
				interval = fr.cnrs.iees.omhtk.utils.Interval(]0.0,+∞[)
				precision = java.lang.Double(0.01)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m)
			field Cw0
				description = java.lang.String(wind effect on spotting distance)
				interval = fr.cnrs.iees.omhtk.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.01)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m-1)
			table m
				dataElementType = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				description = java.lang.String(flame lifespan thresholds)
				interval = fr.cnrs.iees.omhtk.utils.Interval(]0.0,+∞[)
				precision = java.lang.Double(0.01)
				units = java.lang.String(min)
			table topoMap
				generatedClassName = java.lang.String(TopoMap)
				record slope
					generatedClassName = java.lang.String(slope)
					field sX
						description = java.lang.String(slope factor in x direction)
						interval = fr.cnrs.iees.omhtk.utils.Interval(]-∞,+∞[)
						precision = java.lang.Double(0.01)
						type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
						units = java.lang.String(?)
					field sY
						description = java.lang.String(slope factor in y direction)
						interval = fr.cnrs.iees.omhtk.utils.Interval(]-∞,+∞[)
						precision = java.lang.Double(0.01)
						type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
						units = java.lang.String(?)
		dimensioner nY
			size = java.lang.Integer(300)
		dimensioner nX
			size = java.lang.Integer(300)
		record landDrv
			dynamic = java.lang.Boolean(true)
			generatedClassName = java.lang.String(landDrv)
			field nRabbits
				description = java.lang.String(number of burning cells)
				range = au.edu.anu.omhtk.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String()
			table fuelLoad2
				dataElementType = fr.cnrs.iees.twcore.constants.DataElementType(Byte)
				description = java.lang.String(fuel state (for output only))
				range = au.edu.anu.omhtk.util.IntegerRange(0..2)
				units = java.lang.String(0 unburnt 1 burning 2 burnt)
			table windMap
				generatedClassName = java.lang.String(WindMap)
				record wind
					generatedClassName = java.lang.String(wind)
					field u
						description = java.lang.String(wind velocity in x direction)
						interval = fr.cnrs.iees.omhtk.utils.Interval([0.0,+∞[)
						precision = java.lang.Double(0.01)
						type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
						units = java.lang.String(m s-1)
					field v
						description = java.lang.String(wind velocity in y direction)
						interval = fr.cnrs.iees.omhtk.utils.Interval([0.0,+∞[)
						precision = java.lang.Double(0.01)
						type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
						units = java.lang.String(m s-1)
			field burntArea
				description = java.lang.String(total area burnt)
				interval = fr.cnrs.iees.omhtk.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.01)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(ha)
			table fuelBed
				generatedClassName = java.lang.String(FuelBed)
				record fuel
					generatedClassName = java.lang.String(fuel)
					field residentRabbitDieOutTime
						description = java.lang.String(flame die-off date)
						interval = fr.cnrs.iees.omhtk.utils.Interval(]0.0,+∞[)
						precision = java.lang.Double(1.0)
						type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
						units = java.lang.String(s)
					field hoppingRabbitLandingTime
						description = java.lang.String(ember landing date)
						interval = fr.cnrs.iees.omhtk.utils.Interval(]0.0,+∞[)
						precision = java.lang.Double(1.0)
						type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
						units = java.lang.String(s)
					field residentRabbitReproductionTime
						description = java.lang.String(flame time to spread)
						interval = fr.cnrs.iees.omhtk.utils.Interval(]0.0,+∞[)
						precision = java.lang.Double(1.0)
						type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
						units = java.lang.String(s)
					field residentRabbitPresent
						description = java.lang.String(burning)
						type = fr.cnrs.iees.twcore.constants.DataElementType(Boolean)
					field fuelLoad
						description = java.lang.String(fuel state)
						range = au.edu.anu.omhtk.util.IntegerRange(0..2)
						type = fr.cnrs.iees.twcore.constants.DataElementType(Byte)
						units = java.lang.String(0 unburnt 1 burning 2 burnt)
					field fuelType
						description = java.lang.String(type of fuel)
						range = au.edu.anu.omhtk.util.IntegerRange(0..*)
						type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
						units = java.lang.String(1 grass, ...)
					field hoppingRabbitExpected
						description = java.lang.String(burning soon)
						type = fr.cnrs.iees.twcore.constants.DataElementType(Boolean)
		dimensioner nExtinct
			size = java.lang.Integer(4)
	experiment expt
		design dsgn
			type = fr.cnrs.iees.twcore.constants.ExperimentDesignType(singleRun)
	system sys1
		constantClass = java.lang.String(code.sys1.generated.LandCst)
		driverClass = java.lang.String(code.sys1.generated.LandDrv)
		dynamics sim1
			timeline tmLn1
				longestTimeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(SECOND)
				scale = fr.cnrs.iees.twcore.constants.TimeScaleType(MONO_UNIT)
				shortestTimeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(SECOND)
				timeOrigin = fr.cnrs.iees.twcore.constants.DateTimeType(0)
				timer clock1
					dt = java.lang.Long(1)
					nTimeUnits = java.lang.Integer(1)
					subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.timer.ClockTimer)
					timeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(SECOND)
					process p1
						function Burn
							functionSnippet = fr.cnrs.iees.omugi.collections.tables.StringTable(([131]"		int nCellX = topoMap.size(0);","		int nCellY = topoMap.size(1);","		Set<Fuel> hoppingRabbits = new HashSet<>();","		// first loop on burning cells (with rabbits)","		// use current drivers as a workspace since it's a table","		for (int i=0; i<nCellX; i++)","			for (int j=0; j<nCellY; j++) {","				// fuel in current cell","				Fuel f = fuelBed.getByInt(i,j);","				// wind components in current cell","				Wind w = windMap.getByInt(i,j);","				double u = w.u();","				double v = w.v();","				double S2 = sumOfSquares(u,v);","				double fS = 1.0;","				if (S2>4)","					fS = 0.01068*S2 -0.21*sqrt(S2) + 1.53; //Acthemeier 2013 eq. 7","				// slope components in current cell","				double Cw = Cw0*fS;","				Slope s = topoMap.getByInt(i,j);","				double sX = s.sX();","				double sY = s.sY();","				// if burning:","				if (f.residentRabbitPresent()) {","					// rabbit reproduction		","					if (round(f.residentRabbitReproductionTime()) == round(t)) {","						// attempt to create nNewRabbits","						for (int nR = 0; nR<nNewRabbits; nR++) {","							double fh = fuelHeight.getByInt(f.fuelType()); ","							double zr = 2*(0.1+random.nextDouble())*fh;","							double hoppingTime = t+dt+2*sqrt(2*zr/g); // TODO: scaling of time step and time units","							// hopping distance: wind and slope effect","							double dX = ( (Cw*u*abs(u)+10*Cf*sX*abs(sX))*dt + Ch*zr*(0.5-random.nextDouble()) )*cellSize*3;","							double dY = ( (Cw*v*abs(v)+10*Cf*sY*abs(sY))*dt + Ch*zr*(0.5-random.nextDouble()) )*cellSize*3;","							// where does the rabbit jump ?","							double x = (i+0.5)*cellSize+dX;","							double y = (j+0.5)*cellSize+dY;","							// forget rabbits jumping outside map","							if ((x>0.0)&&(x<xMax)&&(y>0.0)&&(y<yMax)) {","								int cx = (int) floor(x/xMax * nCellX);","								int cy = (int) floor(y/yMax * nCellY);","								Fuel landingCell = fuelBed.getByInt(cx,cy);","								// if landing cell has a rabbit, then no point landing there so forget it.","								if (!landingCell.residentRabbitPresent()) {","									double reproTime = hoppingTime+dt+random.nextDouble()*cellSize; // TODO: scaling of time step and time units","									double proba = random.nextDouble();","									double dieOutTime = m.getByInt(0)*60;","									if (proba<0.5) {","										dieOutTime += m.getByInt(1)*60;","										if (proba<0.2) {","											dieOutTime += m.getByInt(2)*60;","											if (proba<0.05) {","												dieOutTime += m.getByInt(3)*60;","											}","										}","									}","									dieOutTime += reproTime+dt; // a minimum of 1 time step is required","									// if a hopping rabbit is going to land in my landing cell, then check landing time and","									// keep the earliest one, and forget about new rabbit (it replaced an old one","									if (landingCell.hoppingRabbitExpected()) {","										if (round(hoppingTime)<round(landingCell.hoppingRabbitLandingTime())) {","											// replace former flying rabbit with a new one with precomputed time values","											landingCell.hoppingRabbitLandingTime(hoppingTime);","											landingCell.residentRabbitReproductionTime(reproTime);","											landingCell.residentRabbitDieOutTime(dieOutTime);","											hoppingRabbits.add(landingCell);","										}","									}","									// if no hopping rabbit nor resident rabbit present, check there is something to burn and burn it!","									else if (landingCell.fuelLoad()==0) {","										// place a new flying rabbit in this cell with precomputed time values","										landingCell.hoppingRabbitExpected(true);","										landingCell.hoppingRabbitLandingTime(hoppingTime);","										landingCell.residentRabbitReproductionTime(reproTime);","										landingCell.residentRabbitDieOutTime(dieOutTime);","										hoppingRabbits.add(landingCell);","									}","								}","							}","						}","					}","					// rabbit death after burning","					else if (round(f.residentRabbitDieOutTime()) == round(t)) {","						f.residentRabbitPresent(false);","						// do not change hopping rabbit time, just in case one is already present. (normally no because it should have died)","						f.fuelLoad((byte) 2); // set fuel to burnt","					}","				}	","				if (f.hoppingRabbitExpected())","					hoppingRabbits.add(f);","			} // 1st loop on all cells","		// all resident rabbits have been cleaned up or have reproduced, so now handle hopping rabbits that may land","		// 2nd loop on hopping rabbits only","		for (Fuel f:hoppingRabbits) {","			if (round(f.hoppingRabbitLandingTime()) == round(t)) {","				if (!f.residentRabbitPresent()) { // normally this should always be true, but who knows what can happen...","					f.residentRabbitPresent(true);","					f.hoppingRabbitExpected(false);","					// times for resident rabbit were already set at hopping rabbit creation, no need to change them","					f.fuelLoad((byte) 1); // set fuel to burning","				}","			}","		}","		// copy current to next drivers","		// 3rd loop","		int ba = 0;","		int nr = 0;		","		for (int i=0; i<nCellX; i++) {","			for (int j=0; j<nCellY; j++) {","				Fuel current = fuelBed.getByInt(i,j);","				Fuel next = focalDrv.fuelBed.getByInt(i,j);","				next.fuelLoad(current.fuelLoad());","				next.fuelType(current.fuelType());","				next.residentRabbitPresent(current.residentRabbitPresent());","				next.hoppingRabbitExpected(current.hoppingRabbitExpected());","				next.residentRabbitReproductionTime(current.residentRabbitReproductionTime());","				next.residentRabbitDieOutTime(current.residentRabbitDieOutTime());","				next.hoppingRabbitLandingTime(current.hoppingRabbitLandingTime());","				if (current.fuelLoad()==2)","					ba++;","				if (current.residentRabbitPresent())","					nr++;","				focalDrv.fuelLoad2.setByInt(current.fuelLoad(),i,j);","				Wind ctwind = windMap.getByInt(i,j);","				Wind nxtwind = focalDrv.windMap.getByInt(i,j);","				nxtwind.u(ctwind.u());","				nxtwind.v(ctwind.v());","			}","		}","		focalDrv.burntArea = ba*cellSize*cellSize;","		focalDrv.nRabbits = nr;"))
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(ChangeState)
							userClassName = java.lang.String(code.sys1.generated.Burn)
						dataTracker trk3
							sampleSize = java.lang.String(1)
							subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.tracking.DataTracker2D)
						dataTracker trk1
							sampleSize = java.lang.String()
							subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.tracking.DataTracker0D)
		initialValues initVals1
			Cf = java.lang.Double(1.0)
			Ch = java.lang.Double(0.5)
			Cw0 = java.lang.Double(0.25)
			cellSize = java.lang.Double(10.0)
			g = java.lang.Double(9.81)
			m = DoubleTable(([4]0.1,0.0,0.0,0.0))
			nNewRabbits = java.lang.Integer(4)
		initFunction InitLand
			functionSnippet = fr.cnrs.iees.omugi.collections.tables.StringTable(([45]"		int nCellX = topoMap.size(0);","		int nCellY = topoMap.size(1);","		//site dimensions","		focalCnt.xMax = nCellX*cellSize;","		focalCnt.yMax = nCellY*cellSize;","		// fuel height dep. on type","		focalCnt.fuelHeight.setByInt(1.0,0);","		focalCnt.fuelHeight.setByInt(1.25,1);","		focalCnt.fuelHeight.setByInt(2.0,2);","		focalCnt.fuelHeight.setByInt(5.0,3);","		focalCnt.fuelHeight.setByInt(20.0,4);			","		// setting the topography, wind map, and initial vegetation map","		// use data files for more elaborate things","		for (int i=0; i<nCellX; i++) {","			for (int j=0; j<nCellY; j++) {","				Slope s = topoMap.getByInt(i,j); ","				s.sX(0.0);","				s.sY(0.0);","				Wind w = windMap.getByInt(i,j);","				if (j<nCellY/2) {","					w.u(0.0);","					w.v(-1);","				}","				else {","					w.u(0.0);","					w.v(-1);","				}","				Fuel f = focalDrv.fuelBed.getByInt(i,j);","				// fuel type is grass - means height is 1.25","				f.fuelType(1);","				// fuel load is 0 (unburnt)","				f.fuelLoad((byte) 0);","				f.residentRabbitPresent(false); // except the central one !","				f.hoppingRabbitExpected(false);","				f.residentRabbitReproductionTime(0.0);","				f.residentRabbitDieOutTime(0.0);","				f.hoppingRabbitLandingTime(0.0);","			}","		}","		// ignition: the initial rabbit !","		Fuel f = focalDrv.fuelBed.getByInt(nCellX/2,nCellY/2);","		f.residentRabbitPresent(true);","		f.residentRabbitReproductionTime(1.0);","		f.residentRabbitDieOutTime(2.0);		","		focalDrv.nRabbits = 1;"))
			type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(SetInitialState)
			userClassName = java.lang.String(code.sys1.generated.InitLand)
	userInterface gui
		top top
			widget ctrl
				layoutOrder = java.lang.Integer(0)
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.ControlWidget2)
		tab output
			orientation = fr.cnrs.iees.twcore.constants.UIContainerOrientation(horizontal)
			widget wgt1
				maxAxes = java.lang.Integer(2)
				layoutOrder = java.lang.Integer(4)
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.TimeSeriesWidget1)
			widget wgt2
				zRange = fr.cnrs.iees.omhtk.utils.Interval([0.0,2.0])
				nViews = java.lang.Integer(2)
				layoutOrder = java.lang.Integer(0)
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.MatrixWidget1)

// CROSS-LINKS
[dataTracker:trk3] sampleArena trks8 [system:sys1]
[dataTracker:trk3] trackTable trks9 [table:fuelLoad2]
	index = fr.cnrs.iees.twcore.constants.TrackerType(([1]"[0:299|0:299]"))
[dataTracker:trk1] trackField trks2 [field:burntArea]
[dataTracker:trk1] trackField trks3 [field:nRabbits]
[dataTracker:trk1] sampleArena trks1 [system:sys1]
[relationType:*returnsTo*] fromCategory frm2 [category:*component*]
[relationType:*returnsTo*] toCategory to2 [category:*component*]
[system:sys1] belongsTo bt3 [category:*permanent*]
[system:sys1] belongsTo bt2 [category:*atomic*]
[system:sys1] belongsTo bt1 [category:*arena*]
[widget:wgt2] trackSeries trks7 [dataTracker:trk3]
[widget:wgt1] trackSeries trks4 [dataTracker:trk1]
[process:p1] appliesTo aplyTo1 [category:*arena*]
[widget:ctrl] trackTime trks10 [dynamics:sim1]
[table:fuelLoad2] sizedBy szBy9 [dimensioner:nY]
	rank = java.lang.Integer(1)
[table:fuelLoad2] sizedBy szBy8 [dimensioner:nX]
	rank = java.lang.Integer(0)
[table:fuelBed] sizedBy szBy2 [dimensioner:nY]
	rank = java.lang.Integer(1)
[table:fuelBed] sizedBy szBy1 [dimensioner:nX]
	rank = java.lang.Integer(0)
[category:*assemblage*] autoVar auto [record:AVPopulation]
[category:*ephemeral*] autoVar auto1 [record:AVEphemeral]
[table:topoMap] sizedBy szBy7 [dimensioner:nY]
	rank = java.lang.Integer(1)
[table:topoMap] sizedBy szBy6 [dimensioner:nX]
	rank = java.lang.Integer(0)
[table:windMap] sizedBy szBy5 [dimensioner:nY]
	rank = java.lang.Integer(1)
[table:windMap] sizedBy szBy4 [dimensioner:nX]
	rank = java.lang.Integer(0)
[table:fuelHeight] sizedBy szBy3 [dimensioner:nFuelTypes]
	rank = java.lang.Integer(0)
[relationType:*parentTo*] fromCategory frm1 [category:*component*]
[relationType:*parentTo*] toCategory to1 [category:*component*]
[category:*arena*] constants cnsts1 [record:landCst]
[category:*arena*] drivers drvs1 [record:landDrv]
[table:m] sizedBy szBy10 [dimensioner:nExtinct]
	rank = java.lang.Integer(0)