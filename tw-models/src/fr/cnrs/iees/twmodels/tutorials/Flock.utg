treegraph // saved by OmugiGraphExporter on Tue Jun 08 11:07:27 CEST 2021

	edge_factory = java.lang.String(au.edu.anu.twcore.root.TwConfigFactory)
	node_factory = java.lang.String(au.edu.anu.twcore.root.TwConfigFactory)
// TREE
3worlds Flock
	authors = au.edu.anu.rscs.aot.collections.tables.StringTable(([2]"Jacques Gignoux","Ian D. Davies"))
	built-by = java.lang.String(gignoux (8 avr. 2021))
	contacts = au.edu.anu.rscs.aot.collections.tables.StringTable(([2]"jacques.gignoux@upmc.fr","Ian.Davies@anu.edu.au"))
	precis = java.lang.String(Tutorial: Testing flocking behaviour of mobile components)
	publication = au.edu.anu.rscs.aot.collections.tables.StringTable(([1]"https://en.wikipedia.org/wiki/Boids"))
	version = java.lang.String(demo)
	importSnippet =  au.edu.anu.rscs.aot.collections.tables.StringTable(([1]"static java.lang.Math.*"))
	predefined *categories*
		categorySet *organisation*
			category *assemblage*
			category *atomic*
		record AVEphemeral
			field birthDate
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field age
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
		record AVPopulation
			field count
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(#)
			field nRemoved
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(#)
			field nAdded
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(#)
		categorySet *systemElements*
			category *life cycle*
			category *group*
			category *relation*
			category *component*
			category *arena*
		categorySet *lifespan*
			category *ephemeral*
			category *permanent*
	dataDefinition dDef
		record dec
			dynamic = java.lang.Boolean(false)
			generatedClassName = java.lang.String(dec)
			field sumY
				description = java.lang.String(Y location of barycentre of neighbours)
				interval = fr.ens.biologie.generic.utils.Interval([0.0,1000.0])
				precision = java.lang.Double(0.001)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m)
			field sumX
				description = java.lang.String(X location of barycentre of neighbours)
				interval = fr.ens.biologie.generic.utils.Interval([0.0,1000.0])
				precision = java.lang.Double(0.001)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m)
			field nLocal
				description = java.lang.String(number of boids within detection range)
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(#)
			field sumdX
				description = java.lang.String(sum of velocity in X of neighbours)
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.001)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m/s)
			field sumdY
				description = java.lang.String(sum of velocity in Y of neighbours)
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.001)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m/s)
			field avoidY
				description = java.lang.String(movement in Y to avoid collision with others)
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m)
			field avoidX
				description = java.lang.String(movement in X to avoid collision with others)
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m)
		record cnt
			dynamic = java.lang.Boolean(false)
			generatedClassName = java.lang.String(cnt)
			field safetyRange
				description = java.lang.String(minimal distance between birds)
				interval = fr.ens.biologie.generic.utils.Interval([0.0,20.0])
				precision = java.lang.Double(0.001)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m)
			field visualFieldAngle
				interval = fr.ens.biologie.generic.utils.Interval([0.0,360.0])
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(°)
			field range
				description = java.lang.String(radius of local group)
				interval = fr.ens.biologie.generic.utils.Interval([0.0,20.0])
				precision = java.lang.Double(0.001)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m)
			field speed
				description = java.lang.String(speed of flight)
				interval = fr.ens.biologie.generic.utils.Interval([0.0,12.0])
				precision = java.lang.Double(0.001)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m/s)
		record drv
			dynamic = java.lang.Boolean(true)
			generatedClassName = java.lang.String(drv)
			field dY
				description = java.lang.String(velocity in Y)
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.001)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m/s)
			field dX
				description = java.lang.String(velocity in X)
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.001)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m/s)
			field heading
				description = java.lang.String(direction of flight)
				interval = fr.ens.biologie.generic.utils.Interval([0.0,360.0[)
				precision = java.lang.Double(1.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(°)
			field y
				description = java.lang.String()
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field x
				description = java.lang.String()
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
	experiment expt
		design dsgn
			type = fr.cnrs.iees.twcore.constants.ExperimentDesignType(singleRun)
	system sys1
		dynamics sim1
			timeline tmLn1
				longestTimeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(SECOND)
				scale = fr.cnrs.iees.twcore.constants.TimeScaleType(MONO_UNIT)
				shortestTimeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(SECOND)
				timeOrigin = fr.cnrs.iees.twcore.constants.DateTimeType(0)
				timer clock1
					dt = java.lang.Long(1)
					nTimeUnits = java.lang.Integer(1)
					subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.timer.ClockTimer)
					timeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(SECOND)
					process p2b
						function PrepareMove
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(ChangeRelationState)
							userClassName = java.lang.String(code.sys1.generated.PrepareMove)
							functionSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([14]"		focalDec.sumX += other_x;","		focalDec.sumY += other_y;","		focalDec.sumdX += other_dX;","		focalDec.sumdY += other_dY;","		focalDec.nLocal++;","		// rule 2: avoid collisions","		if (squaredEuclidianDistance(x,y,other_x,other_y)<safetyRange*safetyRange) {","			focalDec.avoidX -= (other_x-x);","			focalDec.avoidY -= (other_y-y);","		}","		focalDrv.x = x;","		focalDrv.y = y;","		otherDrv.x = other_x;","		otherDrv.y = other_y;"))
					process p3
						function Move
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(ChangeState)
							userClassName = java.lang.String(code.sys1.generated.Move)
							functionSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([29]"		double incR = 0.0;","		double incT = 0.0;","		// default movement based on inertia, ie in the same direction as before + some random tilt","		incR = speed;","		incT = (random.nextDouble()*PI/4 - PI/8)/(speed);","		double radHeading = heading*PI/180+incT;","		double moveX = incR*cos(radHeading);","		double moveY = incR*sin(radHeading);","		// if there are visible birds, add corrections:","		if (nLocal>0) {","			// rule 1: cohesion - flying towards the barycentre of the local group","			// move 1% towards the centre","			moveX += (sumX/nLocal-x)/10;","			moveY += (sumY/nLocal-y)/10;","			// rule 2: separation - avoid collision with other boids","			moveX += focalDec.avoidX/nLocal;","			moveY += focalDec.avoidY/nLocal;","			// rule 3: match movement to others","			moveX += (sumdX/nLocal-dX);","			moveY += (sumdY/nLocal-dY);","		}","		// new location","		focalDrv.x = x+moveX;","		focalDrv.y = y+moveY;","		focalDrv.dX = moveX;","		focalDrv.dY = moveY;","		focalDrv.heading = acos(moveX/euclidianDistance(0.0,0.0,moveX,moveY))*180/PI;","		if (moveY<0.0)","			focalDrv.heading = -focalDrv.heading;"))
					process p2
						function Follow
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(MaintainRelationDecision)
							userClassName = java.lang.String(code.sys1.generated.Follow)
							functionSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([17]"		double sqd = squaredEuclidianDistance(x,y,other_x,other_y);","		if (sqd==0.0)","			return true;","		if (sqd<range*range) { // points within range","			double rOther = sqrt(sqd);","			double tetaOther = acos((other_x-x)/rOther)*180/PI;","			if (other_y-y<0)","				tetaOther = -tetaOther;","			// points within hemisphere determined by heading","			double maxFieldTeta = heading + visualFieldAngle/2;","			double minFieldTeta = heading - visualFieldAngle/2;","// uncomment these lines for the model to work properly			","//			maxFieldTeta = BoidUtils.normalizeAngleBetweenMinus180and180Degrees(maxFieldTeta);","//			minFieldTeta = BoidUtils.normalizeAngleBetweenMinus180and180Degrees(minFieldTeta);","			return (tetaOther<maxFieldTeta)||(tetaOther>minFieldTeta);","			}","		return false;"))
					process p1
						function Detect
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(RelateToDecision)
							userClassName = java.lang.String(code.sys1.generated.Detect)
							functionSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([17]"		double sqd = squaredEuclidianDistance(x,y,other_x,other_y);","		if (sqd==0.0)","			return true;","		if (sqd<range*range) { // points within range","			double rOther = sqrt(sqd);","			double tetaOther = acos((other_x-x)/rOther)*180/PI;","			if (other_y-y<0)","				tetaOther = -tetaOther;","			// points within hemisphere determined by heading","			double maxFieldTeta = heading + visualFieldAngle/2;","			double minFieldTeta = heading - visualFieldAngle/2;","// uncomment these lines for the model to work properly			","//			maxFieldTeta = BoidUtils.normalizeAngleBetweenMinus180and180Degrees(maxFieldTeta);","//			minFieldTeta = BoidUtils.normalizeAngleBetweenMinus180and180Degrees(minFieldTeta);","			return (tetaOther<maxFieldTeta)||(tetaOther>minFieldTeta);","			}","		return false;"))
		structure struc1
			fixedPoints = au.edu.anu.rscs.aot.collections.tables.DoubleTable(([1]0.0))
			componentType bird
				constantClass = java.lang.String(code.sys1.generated.Cnt)
				decoratorClass = java.lang.String(code.sys1.generated.Dec)
				driverClass = java.lang.String(code.sys1.generated.Drv)
				lifeSpan = fr.cnrs.iees.twcore.constants.LifespanType(permanent)
				mobile = java.lang.Boolean(false)
				relocateFunctionName = au.edu.anu.rscs.aot.collections.tables.StringTable(([1]""))
				initFunction Init1
					type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(SetInitialState)
					userClassName = java.lang.String(code.sys1.generated.Init1)
					functionSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([7]"		focalCnt.speed = 6;","		focalCnt.range = 80;","		focalCnt.safetyRange = 20;","		focalCnt.visualFieldAngle = 270;","		focalDrv.heading = random.nextDouble()*360-180;","		focalDrv.x = random.nextDouble()*1000;","		focalDrv.y = random.nextDouble()*1000;"))
				initialValues cmp1
					nInstances = java.lang.Integer(40)
			space space1
				borderType = fr.cnrs.iees.twcore.constants.BorderListType(([4]"wrap","wrap","wrap","wrap"))
				guardAreaWidth = java.lang.Double(0.0)
				precision = java.lang.Double(1.0)
				type = fr.cnrs.iees.twcore.constants.SpaceType(continuousFlatSurface)
				units = java.lang.String(m)
				x-limits = fr.ens.biologie.generic.utils.Interval([0.0,1000.0])
				y-limits = fr.ens.biologie.generic.utils.Interval([0.0,1000.0])
			relationType sight
				lifeSpan = fr.cnrs.iees.twcore.constants.LifespanType(ephemeral)
	userInterface gui
		top top
			widget timer
				order = java.lang.Integer(1)
				sender = java.lang.Integer(0)
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.ProgressWidget1)
			widget ctrl
				order = java.lang.Integer(0)
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.ControlWidget1)
		tab space
			orientation = fr.cnrs.iees.twcore.constants.UIContainerOrientation(horizontal)
			widget wgt1
				order = java.lang.Integer(0)
				sender = java.lang.Integer(0)
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.SpaceWidget1)

// CROSS-LINKS
[componentType:bird] belongsTo bt6 [category:*permanent*]
[componentType:bird] belongsTo bt5 [category:*component*]
[componentType:bird] belongsTo bt4 [category:*atomic*]
[relationType:sight] fromCategory from1 [category:*atomic*]
[relationType:sight] toCategory to1 [category:*atomic*]
[category:*atomic*] drivers  [record:drv]
[category:*atomic*] decorators decs1 [record:dec]
[category:*atomic*] constants cnts1 [record:cnt]
[system:sys1] belongsTo bt3 [category:*permanent*]
[system:sys1] belongsTo bt2 [category:*assemblage*]
[system:sys1] belongsTo bt1 [category:*arena*]
[widget:wgt1] trackSpace trks2 [space:space1]
[process:p1] appliesTo aplyTo1 [relationType:sight]
[process:p1] inSpace in1 [space:space1]
	searchRadius = java.lang.Double(100.0)
[process:p2] appliesTo aplyTo2 [relationType:sight]
[process:p2] inSpace in2 [space:space1]
	searchRadius = java.lang.Double(100.0)
[process:p3] inSpace in3 [space:space1]
	searchRadius = java.lang.Double(100.0)
[process:p3] dependsOn depsOn1 [process:p2b]
[process:p3] appliesTo aplyTo3 [category:*atomic*]
[widget:timer] trackTime trks1 [dynamics:sim1]
[category:*assemblage*] autoVar auto [record:AVPopulation]
[category:*ephemeral*] autoVar auto1 [record:AVEphemeral]
[process:p2b] dependsOn depsOn2 [process:p1]
[process:p2b] appliesTo aplyTo4 [relationType:sight]
[process:p2b] dependsOn depsOn3 [process:p2]
[space:space1] coordinate crdmp [field:x]
	rank = java.lang.Integer(0)
[space:space1] coordinate crdmp1 [field:y]
	rank = java.lang.Integer(1)