treegraph // saved by OmugiGraphExporter on Mon Nov 29 10:36:29 AEDT 2021

	edge_factory = java.lang.String(au.edu.anu.twcore.root.TwConfigFactory)
	node_factory = java.lang.String(au.edu.anu.twcore.root.TwConfigFactory)
// TREE
3worlds Ockham2
	authors = au.edu.anu.rscs.aot.collections.tables.StringTable(([1]""))
	built-by = java.lang.String(ian (23 Mar 2022))
	contacts = au.edu.anu.rscs.aot.collections.tables.StringTable(([1]""))
	importSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([8]"java.util.List","static code.utilities.Utilities1.*","fr.ens.biologie.generic.utils.Tuple","java.util.Map","java.util.HashMap","fr.cnrs.iees.uit.space.Distance","java.util.Comparator","java.util.ArrayList"))
	precis = java.lang.String(Single sex, overlapping generations)
	publication = au.edu.anu.rscs.aot.collections.tables.StringTable(([1]""))
	version = java.lang.String(0.0.7)
	dataDefinition dDef
		dimensioner ydim
			size = java.lang.Integer(100)
		record glbCnt
			dynamic = java.lang.Boolean(false)
			generatedClassName = java.lang.String(glbCnt)
			field ageSenescent
				range = au.edu.anu.rscs.aot.util.IntegerRange(1..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(y)
			field isDispersalShort
				type = fr.cnrs.iees.twcore.constants.DataElementType(Boolean)
			field k2
				description = java.lang.String(carrying capacity if habitat is false)
				interval = fr.ens.biologie.generic.utils.Interval(]0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field k1
				description = java.lang.String(carrying capacity if habitat is true)
				interval = fr.ens.biologie.generic.utils.Interval(]0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field isHabitatFragmented
				description = java.lang.String(true if habitat is fragmented)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Boolean)
			field r2
				description = java.lang.String(reproductive rate if habitat is false)
				interval = fr.ens.biologie.generic.utils.Interval(]0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field r1
				description = java.lang.String(reproductive rate if habitat is true)
				interval = fr.ens.biologie.generic.utils.Interval(]0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field isDispersalInformed
				description = java.lang.String(true if using informed dispersal)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Boolean)
			field d2
				description = java.lang.String(death rate if habitat is false)
				interval = fr.ens.biologie.generic.utils.Interval(]0.0,1.0[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field ageMature
				range = au.edu.anu.rscs.aot.util.IntegerRange(1..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(y)
			field d1
				description = java.lang.String(death rate if habitat is true)
				interval = fr.ens.biologie.generic.utils.Interval(]0.0,1.0[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field isHabitatDynamic
				type = fr.cnrs.iees.twcore.constants.DataElementType(Boolean)
		dimensioner xdim
			size = java.lang.Integer(100)
		rng rngAnimal
			algorithm = fr.cnrs.iees.twcore.constants.RngAlgType(PCG32)
			resetTime = fr.cnrs.iees.twcore.constants.RngResetType(NEVER)
			seedSource = fr.cnrs.iees.twcore.constants.RngSeedSourceType(RANDOM)
			tableIndex = java.lang.Integer(5)
		rng rngHabitat
			algorithm = fr.cnrs.iees.twcore.constants.RngAlgType(PCG32)
			resetTime = fr.cnrs.iees.twcore.constants.RngResetType(NEVER)
			seedSource = fr.cnrs.iees.twcore.constants.RngSeedSourceType(RANDOM)
			tableIndex = java.lang.Integer(0)
		record glbDec
			dynamic = java.lang.Boolean(false)
			generatedClassName = java.lang.String(glbDec)
			field population2
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String()
			table culledLayer
				dataElementType = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				description = java.lang.String(number of individuals removed by culling)
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				units = java.lang.String()
			field population1
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String()
			table populationAgeClasses
				dataElementType = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				units = java.lang.String()
			table populationLayer
				dataElementType = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				description = java.lang.String(Total population in cells)
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				units = java.lang.String()
			table preDispersalLayer
				dataElementType = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				units = java.lang.String()
			field fractionCulled
				description = java.lang.String(fraction of population that has been removed from over-populated cells)
				interval = fr.ens.biologie.generic.utils.Interval(]0.0,1.0[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field population
				description = java.lang.String(Total population)
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String()
			field segregationRatio
				interval = fr.ens.biologie.generic.utils.Interval(]0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			table preCullLayer
				dataElementType = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				description = java.lang.String(Total population in each cell before culling)
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				units = java.lang.String()
			field occupancy
				interval = fr.ens.biologie.generic.utils.Interval(]0.0,1.0[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
		dimensioner nAgeClasses
			size = java.lang.Integer(20)
		record animalDrv
			dynamic = java.lang.Boolean(true)
			generatedClassName = java.lang.String(animalDrv)
			field xLocation
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m)
			field isNewBorn
				type = fr.cnrs.iees.twcore.constants.DataElementType(Boolean)
			field isMature
				description = java.lang.String(true when age >= ageMature)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Boolean)
			field yLocation
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m)
			field ageInYears
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String()
		record glbDrv
			dynamic = java.lang.Boolean(true)
			generatedClassName = java.lang.String(glbDrv)
			table habitatLayer
				dataElementType = fr.cnrs.iees.twcore.constants.DataElementType(Boolean)
				description = java.lang.String(Map of habitat regions)
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..1)
	experiment expt
		nReplicates = java.lang.Integer(1)
		treatment trt
		design dsgn
			type = fr.cnrs.iees.twcore.constants.ExperimentDesignType(singleRun)
	userInterface gui
		tab debug
			orientation = fr.cnrs.iees.twcore.constants.UIContainerOrientation(horizontal)
			container cont5
				order = java.lang.Integer(0)
				orientation = fr.cnrs.iees.twcore.constants.UIContainerOrientation(vertical)
				widget Fraction culled
					order = java.lang.Integer(1)
					subclass = java.lang.String(au.edu.anu.twuifx.widgets.TimeSeriesWidget1)
				widget Age classes
					order = java.lang.Integer(2)
					subclass = java.lang.String(au.edu.anu.twuifx.widgets.TimeSeriesWidget1)
			container cont2
				order = java.lang.Integer(2)
				orientation = fr.cnrs.iees.twcore.constants.UIContainerOrientation(vertical)
				widget Culled layer
					defaultZRange = fr.ens.biologie.generic.utils.Interval(]0.0,10.0[)
					order = java.lang.Integer(3)
					subclass = java.lang.String(au.edu.anu.twuifx.widgets.MatrixWidget1)
				widget Pre culling layer
					defaultZRange = fr.ens.biologie.generic.utils.Interval(]0.0,10.0[)
					order = java.lang.Integer(2)
					subclass = java.lang.String(au.edu.anu.twuifx.widgets.MatrixWidget1)
		top top
			widget ctrl
				order = java.lang.Integer(0)
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.ControlWidget2)
		headless hl
			widget popWriter
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.headless.HLExperimentWidget1)
			widget progress
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.headless.HLProgressWidget1)
			widget ratioWriter
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.headless.HLExperimentWidget1)
			widget occWriter
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.headless.HLExperimentWidget1)
			widget cullWriter
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.headless.HLExperimentWidget1)
		tab dashboard
			orientation = fr.cnrs.iees.twcore.constants.UIContainerOrientation(horizontal)
			container cont8
				order = java.lang.Integer(1)
				orientation = fr.cnrs.iees.twcore.constants.UIContainerOrientation(vertical)
				widget Population layer
					defaultZRange = fr.ens.biologie.generic.utils.Interval(]0.0,5.0[)
					order = java.lang.Integer(0)
					subclass = java.lang.String(au.edu.anu.twuifx.widgets.MatrixWidget1)
				widget Habitat layer
					defaultZRange = fr.ens.biologie.generic.utils.Interval(]0.0,1.0[)
					order = java.lang.Integer(2)
					subclass = java.lang.String(au.edu.anu.twuifx.widgets.MatrixWidget1)
			container cont7
				order = java.lang.Integer(0)
				orientation = fr.cnrs.iees.twcore.constants.UIContainerOrientation(vertical)
				widget Occupancy
					order = java.lang.Integer(0)
					subclass = java.lang.String(au.edu.anu.twuifx.widgets.TimeSeriesWidget1)
				widget space
					order = java.lang.Integer(1)
					subclass = java.lang.String(au.edu.anu.twuifx.widgets.SpaceWidget1)
	system sys1
		constantClass = java.lang.String(code.sys1.generated.GlbCnt)
		decoratorClass = java.lang.String(code.sys1.generated.GlbDec)
		driverClass = java.lang.String(code.sys1.generated.GlbDrv)
		dynamics sim1
			timeline tmLn1
				longestTimeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(UNSPECIFIED)
				scale = fr.cnrs.iees.twcore.constants.TimeScaleType(ARBITRARY)
				shortestTimeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(UNSPECIFIED)
				timeOrigin = fr.cnrs.iees.twcore.constants.DateTimeType(0)
				timer step
					dt = java.lang.Long(1)
					nTimeUnits = java.lang.Integer(1)
					subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.timer.ClockTimer)
					timeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(UNSPECIFIED)
					process p8
						dataTracker trkOccAndSegRatio
							sampleSize = java.lang.String()
							subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.tracking.DataTracker0D)
						dataTracker trkSegregationRatio
							sampleSize = java.lang.String()
							subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.tracking.DataTracker0D)
						dataTracker trkFractionCulled
							sampleSize = java.lang.String()
							subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.tracking.DataTracker0D)
						dataTracker trkCulledLayer
							sampleSize = java.lang.String()
							subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.tracking.DataTracker2D)
						dataTracker trkPopulation
							sampleSize = java.lang.String()
							subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.tracking.DataTracker0D)
						dataTracker trkAgeClasses
							sampleSize = java.lang.String()
							subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.tracking.DataTracker0D)
						dataTracker trkHabitatLayer
							sampleSize = java.lang.String()
							subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.tracking.DataTracker2D)
						dataTracker trkPopulationLayer
							sampleSize = java.lang.String()
							subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.tracking.DataTracker2D)
						dataTracker trkOccupancy
							sampleSize = java.lang.String()
							subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.tracking.DataTracker0D)
						function SysSetOutputValues
							functionSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([16]"		// For debugging, record difference between pre and post culling maps","		int totalKilled = 0;","		int totalPreCull = 0;","		for (int x = 0; x < populationLayer.size(0); x++)","			for (int y = 0; y < populationLayer.size(1); y++) {","				int p1 = preCullLayer.getByInt(x, y);","				totalPreCull += p1;","				int p2 = populationLayer.getByInt(x, y);","				int killed = p1 - p2;","				totalKilled += killed;","				focalDec.culledLayer.setByInt(killed, x, y);","			}","		focalDec.fractionCulled = (double) totalKilled / (double) totalPreCull;","		double mx = habitatLayer.size(0) * habitatLayer.size(1) * (k1 + k2) / 2.0;","		focalDec.occupancy = population / mx;","		focalDec.segregationRatio = (double) population2 / (double) population1;"))
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(ChangeState)
							userClassName = java.lang.String(code.sys1.generated.SysSetOutputValues)
						dataTracker trkPreCullLayer
							sampleSize = java.lang.String()
							subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.tracking.DataTracker2D)
					process p7
						function AniAge
							functionSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([18]"		// record final population","		int ix = (int) (xLocation / habitatCellSize);","		int iy = (int) (yLocation / habitatCellSize);","		// record final population density layer","		arenaDec.populationLayer.setByInt(arenaDec.populationLayer.getByInt(ix, iy) + 1, ix, iy);","		int age = (int) ageInYears;","		age = Math.min(age, populationAgeClasses.size() - 1);","		arenaDec.populationAgeClasses.setByInt(arenaDec.populationAgeClasses.getByInt(age) + 1, age);","		arenaDec.population++;","		if (habitatLayer.getByInt(ix, iy))","			arenaDec.population1++;","		else","			arenaDec.population2++;	","		// age individuals - could be done at start of loop","		focalDrv.ageInYears += 1;","		focalDrv.isNewBorn=false;","		if (focalDrv.ageInYears >= ageMature)","			focalDrv.isMature = true;"))
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(ChangeState)
							userClassName = java.lang.String(code.sys1.generated.AniAge)
					process p6
						function AniCull
							functionSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([13]"		// remove (probabilistically) individuals from populations above carrying","		// capacity.","		int ix = (int) (xLocation / habitatCellSize);","		int iy = (int) (yLocation / habitatCellSize);","		double k = k2;","		if (habitatLayer.getByInt(ix, iy))","			k = k1;","		double n = preCullLayer.getByInt(ix, iy);","		if (n > k) {","			double p = (n - k) / n;","			return decider.decide(p);","		} else","			return false;"))
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(DeleteDecision)
							userClassName = java.lang.String(code.sys1.generated.AniCull)
					process p5
						function AniSetPreCullingLayer
							functionSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([4]"		// set values of population density for all individuals including new born","		int ix = (int) (xLocation / habitatCellSize);","		int iy = (int) (yLocation / habitatCellSize);","		arenaDec.preCullLayer.setByInt(arenaDec.preCullLayer.getByInt(ix, iy) + 1, ix, iy);"))
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(ChangeState)
							userClassName = java.lang.String(code.sys1.generated.AniSetPreCullingLayer)
					process p4
						function AniDispersal
							functionSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([35]"		if (isNewBorn) { // only disperse new born","			int nTrials = 1;","			if (isDispersalInformed)","				nTrials = 3;","			double meanDistance = 1000.0;","			if (isDispersalShort)","				meanDistance = 100.0;","			List<Tuple<Double, Double, Double>> sites = new ArrayList<>();","			int w = habitatLayer.size(0);","			int h = habitatLayer.size(1);","			for (int i = 0; i < nTrials; i++) {","				double distance = -(meanDistance) * Math.log(1 - random.nextDouble());","				double direction = random.nextDouble() * (2 * Math.PI);","				double tx = xLocation + distance * Math.cos(direction);","				double ty = yLocation + distance * Math.sin(direction);","				int ix = gridLocation(tx, w, habitatCellSize);","				int iy = gridLocation(ty, h, habitatCellSize);","				// n maybe non-zero in overlappig generations","				int n = preDispersalLayer.getByInt(ix, iy);","				double attraction = random.nextDouble();","				// bias habitat [true]","				if (habitatLayer.getByInt(ix, iy))","					attraction += 1;","				sites.add(new Tuple<Double, Double, Double>(tx, ty, attraction));","			}","			sites.sort(new Comparator<Tuple<Double, Double, Double>>() {","				@Override","				public int compare(Tuple<Double, Double, Double> o1, Tuple<Double, Double, Double> o2) {","					return o1.getThird().compareTo(o2.getThird());","				}","			});","			Tuple<Double, Double, Double> location = sites.get(sites.size() - 1);","			focalDrv.xLocation = location.getFirst();","			focalDrv.yLocation = location.getSecond();","		}"))
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(ChangeState)
							userClassName = java.lang.String(code.sys1.generated.AniDispersal)
					process p3
						function AniDeath
							functionSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([11]"		if (!isNewBorn) { // assume death rate is included in birth rates","			int ix = (int) (xLocation / habitatCellSize);","			int iy = (int) (yLocation / habitatCellSize);","			double d = d2;","			if (habitatLayer.getByInt(ix, iy))","				d = d1;","			if (ageInYears >= ageSenescent)","				d = 1.0;","			return decider.decide(d);","		} else","			return false;"))
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(DeleteDecision)
							userClassName = java.lang.String(code.sys1.generated.AniDeath)
					process p2
						function AniNBirths
							functionSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([9]"		if (isMature) {","			int ix = (int) (xLocation / habitatCellSize);","			int iy = (int) (yLocation / habitatCellSize);","			double r = r2;","			if (habitatLayer.getByInt(ix, iy))","				r = r1;","			return r;","		} else","			return 0;"))
							relateToProduct = java.lang.Boolean(false)
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(CreateOtherDecision)
							userClassName = java.lang.String(code.sys1.generated.AniNBirths)
							function AniInitNewBorn
								functionSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([5]"		otherDrv.isMature = false;","		otherDrv.isNewBorn = true;","		otherDrv.ageInYears = 0;","		otherDrv.xLocation = xLocation;","		otherDrv.yLocation = yLocation;"))
								type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(SetOtherInitialState)
								userClassName = java.lang.String(code.sys1.generated.AniInitNewBorn)
					process p1
						function SysSetHabitatLayer
							functionSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([83]"		int time = (int) (t - 1);","		if ((time == 0) || isHabitatDynamic) {","			// make new pattern","			// assumptions:","			// 1) a square landscape","			// 2) good:bad habitat ratio of 1:1","			// 3) Torus topology","			// clumped = 0.95; fragmented 0.01","			double fracBad = 0.5;","			double pContagion = 0.95;","			if (isHabitatFragmented)","				pContagion = 0.01;","			focalDrv.habitatLayer.fillWith(true);// set all to 'good'","			int w = habitatLayer.size(0);","			int h = habitatLayer.size(1);","			Map<String, List<Integer>> goodList = new HashMap<>();","			List<String> keys = new ArrayList<>();","			for (int x = 0; x < w; x++)","				for (int y = 0; y < h; y++) {","					List<Integer> l = new ArrayList<>();","					l.add(x);","					l.add(y);","					String key = new StringBuilder().append(x).append('-').append(y).toString();","					keys.add(key);","					goodList.put(key, l);","				}","","			boolean[][] visited = new boolean[w][h];","			int area = w * h;","			int quota = (int) (fracBad * area);","			int nBad = 0;","			while (nBad < quota) {","				double pSpread = 1.0;","				// ignition","				List<Integer> frontLineX = new ArrayList<>();","				List<Integer> frontLineY = new ArrayList<>();","				// select random starting point","				int idx = random.nextInt(keys.size());","				String key = keys.get(idx);","				keys.remove(idx);","				List<Integer> l = goodList.get(key);","				int x = l.get(0);","				int y = l.get(1);","				nBad++;","				focalDrv.habitatLayer.setByInt(false, x, y);","				frontLineX.add(x);","				frontLineY.add(y);","				visited[x][y] = true;","				while (!frontLineX.isEmpty() && nBad < quota) {","					pSpread = pSpread * pContagion;","					// spreadFrom","					List<Integer> newFrontLineX = new ArrayList<>();","					List<Integer> newFrontLineY = new ArrayList<>();","					for (int i = 0; i < frontLineX.size(); i++) {","						int sx = frontLineX.get(i);","						int sy = frontLineY.get(i);","						for (int dx = -1; dx <= 1; dx++)","							for (int dy = -1; dy <= 1; dy++)","								if (!(dy == 0 && dx == 0)) {","									int nx = sx + dx;","									if (nx < 0)","										nx += w;","									nx = nx % w;","									int ny = sy + dy;","									if (ny < 0)","										ny += h;","									ny = ny % h;","									if (!visited[nx][ny]) {","										if (random.nextDouble() < pSpread) {","											visited[nx][ny] = true;","											newFrontLineX.add(nx);","											newFrontLineY.add(ny);","											focalDrv.habitatLayer.setByInt(false, nx, ny);","										}","									}","								}","					}","					frontLineX = newFrontLineX;","					frontLineY = newFrontLineY;","					nBad += frontLineX.size();","				}","			}","		}"))
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(ChangeState)
							userClassName = java.lang.String(code.sys1.generated.SysSetHabitatLayer)
					process p3A
						function AniSetPreDispersalLayer
							functionSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([5]"		if (!isNewBorn) { // don't included undispersed new born in counts.","			int ix = (int) (xLocation / habitatCellSize);","			int iy = (int) (yLocation / habitatCellSize);","			arenaDec.preDispersalLayer.setByInt(arenaDec.preDispersalLayer.getByInt(ix, iy) + 1, ix, iy);","		}"))
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(ChangeState)
							userClassName = java.lang.String(code.sys1.generated.AniSetPreDispersalLayer)
			stoppingCondition stCd1
				endTime = fr.cnrs.iees.twcore.constants.DateTimeType(100)
				subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.stop.SimpleStoppingCondition)
		structure struc1
			space landscape
				borderType = fr.cnrs.iees.twcore.constants.BorderListType(([4]"wrap","wrap","wrap","wrap"))
				precision = java.lang.Double(0.1)
				type = fr.cnrs.iees.twcore.constants.SpaceType(continuousFlatSurface)
				units = java.lang.String(m)
				x-limits = fr.ens.biologie.generic.utils.Interval([0.0,10000.0[)
				y-limits = fr.ens.biologie.generic.utils.Interval([0.0,10000.0[)
			categorySet animalSet
				category animalCat
					constantClass = java.lang.Object(null)
					decoratorClass = java.lang.Object(null)
					driverClass = java.lang.String(AnimalCat_Drv)
			componentType animalType
				driverClass = java.lang.String(code.sys1.generated.AnimalDrv)
				initialValues animal
					nInstances = java.lang.Integer(8000)
				initFunction AniInit
					functionSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([7]"		// random locations","		focalDrv.xLocation = random.nextDouble() * landscapeWidth;","		focalDrv.yLocation = random.nextDouble() * landscapeHeight;","		// Initial population is all new born","		focalDrv.isMature = false;","		focalDrv.isNewBorn = true;","		focalDrv.ageInYears =0;"))
					type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(SetInitialState)
					userClassName = java.lang.String(code.sys1.generated.AniInit)
		initFunction SysInit
			functionSnippet = au.edu.anu.rscs.aot.collections.tables.StringTable(([15]"		focalCnt.isDispersalShort = true;// short = 100; long = 1000","		focalCnt.isDispersalInformed = true;// informed - best of 3 trials","		focalCnt.isHabitatDynamic = true;// dynamic:every year;  static: never","		focalCnt.isHabitatFragmented = true;// clumped or fragmented","","		// Habitat effects carrying capacity. No effect if equal","		// NB Calibrated for females only population","		focalCnt.k1 = 3.0 / 2.0;","		focalCnt.k2 = 1.5 / 2.0;// 1.5 i.e half of k1/2","		// Habitat effects reproduction rate. No effect if equal","		focalCnt.r1 = 2.0;","		focalCnt.r2 = 2.0;// 0.5 just sustainable?","		// set to non-overlapping generations","		focalCnt.ageMature = 1;","		focalCnt.ageSenescent = 1;"))
			type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(SetInitialState)
			userClassName = java.lang.String(code.sys1.generated.SysInit)
	predefined *categories*
		categorySet *lifespan*
			category *ephemeral*
			category *permanent*
		categorySet *systemElements*
			category *life cycle*
			category *group*
			category *component*
			category *relation*
			category *arena*
		relationType *parentTo*
			lifespan = fr.cnrs.iees.twcore.constants.LifespanType(permanent)
		record AVPopulation
			field nRemoved
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(#)
			field count
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(#)
			field nAdded
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(#)
		categorySet *organisation*
			category *assemblage*
			category *atomic*
		record AVEphemeral
			field birthDate
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field age
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
		relationType *returnsTo*
			lifespan = fr.cnrs.iees.twcore.constants.LifespanType(permanent)

// CROSS-LINKS
[widget:Population layer] trackSeries trks17 [dataTracker:trkPopulationLayer]
[dataTracker:trkFractionCulled] trackField trks20 [field:fractionCulled]
[dataTracker:trkFractionCulled] sampleArena trks19 [system:sys1]
[function:AniDispersal] useRNG uses7 [rng:rngAnimal]
[dataTracker:trkPreCullLayer] trackTable trks11 [table:preCullLayer]
	index = fr.cnrs.iees.twcore.constants.TrackerType(([1]"[0:99|0:99]"))
[dataTracker:trkPreCullLayer] sampleArena trks10 [system:sys1]
[widget:Occupancy] trackSeries trks7 [dataTracker:trkOccAndSegRatio]
[widget:popWriter] trackSeries trks9 [dataTracker:trkPopulation]
[dataTracker:trkPopulationLayer] sampleArena trks15 [system:sys1]
[dataTracker:trkPopulationLayer] trackTable trks16 [table:populationLayer]
	index = fr.cnrs.iees.twcore.constants.TrackerType(([1]"[0:99|0:99]"))
[table:populationAgeClasses] sizedBy x7 [dimensioner:nAgeClasses]
	rank = java.lang.Integer(0)
[function:AniDeath] useRNG uses5 [rng:rngAnimal]
[relationType:*returnsTo*] toCategory to2 [category:*component*]
[relationType:*returnsTo*] fromCategory frm2 [category:*component*]
[system:sys1] belongsTo bt2 [category:*atomic*]
[system:sys1] belongsTo bt3 [category:*permanent*]
[system:sys1] belongsTo bt1 [category:*arena*]
[dataTracker:trkOccAndSegRatio] trackField trks35 [field:occupancy]
[dataTracker:trkOccAndSegRatio] sampleArena trks28 [system:sys1]
[dataTracker:trkOccAndSegRatio] trackField trks29 [field:segregationRatio]
[table:populationLayer] sizedBy x5 [dimensioner:xdim]
	rank = java.lang.Integer(0)
[table:populationLayer] sizedBy y5 [dimensioner:ydim]
	rank = java.lang.Integer(1)
[widget:cullWriter] trackSeries trks33 [dataTracker:trkFractionCulled]
[widget:Age classes] trackSeries trks24 [dataTracker:trkAgeClasses]
[widget:ctrl] trackTime trks25 [dynamics:sim1]
[widget:Habitat layer] trackSeries trks3 [dataTracker:trkHabitatLayer]
[widget:Pre culling layer] trackSeries trks12 [dataTracker:trkPreCullLayer]
[category:*ephemeral*] autoVar auto1 [record:AVEphemeral]
[function:AniCull] useRNG uses8 [rng:rngAnimal]
[dataTracker:trkSegregationRatio] trackField trks31 [field:segregationRatio]
[dataTracker:trkSegregationRatio] sampleArena trks30 [system:sys1]
[dataTracker:trkOccupancy] sampleArena trks26 [system:sys1]
[dataTracker:trkOccupancy] trackField trks27 [field:occupancy]
[dataTracker:trkHabitatLayer] sampleArena trks1 [system:sys1]
[dataTracker:trkHabitatLayer] trackTable trks2 [table:habitatLayer]
	index = fr.cnrs.iees.twcore.constants.TrackerType(([1]"[0:99|0:99]"))
[relationType:*parentTo*] toCategory to1 [category:*component*]
[relationType:*parentTo*] fromCategory frm1 [category:*component*]
[componentType:animalType] belongsTo bt6 [category:*atomic*]
[componentType:animalType] belongsTo bt7 [category:animalCat]
[componentType:animalType] belongsTo bt4 [category:*ephemeral*]
[componentType:animalType] belongsTo bt5 [category:*component*]
[dataTracker:trkCulledLayer] sampleArena trks13 [system:sys1]
[dataTracker:trkCulledLayer] trackTable trks14 [table:culledLayer]
	index = fr.cnrs.iees.twcore.constants.TrackerType(([1]"[0:99|0:99]"))
[category:*arena*] decorators decs1 [record:glbDec]
[category:*arena*] drivers drvs2 [record:glbDrv]
[category:*arena*] constants cnsts1 [record:glbCnt]
[function:AniNBirths] useRNG uses2 [rng:rngAnimal]
[widget:progress] trackTime trks8 [dynamics:sim1]
[widget:Culled layer] trackSeries trks18 [dataTracker:trkCulledLayer]
[table:habitatLayer] sizedBy y [dimensioner:ydim]
	rank = java.lang.Integer(1)
[table:habitatLayer] sizedBy x [dimensioner:xdim]
	rank = java.lang.Integer(0)
[function:SysSetHabitatLayer] useRNG uses1 [rng:rngHabitat]
[dataTracker:trkAgeClasses] sampleArena trks22 [system:sys1]
[dataTracker:trkAgeClasses] trackTable trks23 [table:populationAgeClasses]
	index = fr.cnrs.iees.twcore.constants.TrackerType(([1]""))
[function:AniAge] useRNG uses10 [rng:rngAnimal]
[widget:space] trackSpace trks4 [space:landscape]
[widget:ratioWriter] trackSeries trks34 [dataTracker:trkSegregationRatio]
[dataTracker:trkPopulation] trackField trks6 [field:population]
[dataTracker:trkPopulation] sampleArena trks5 [system:sys1]
[category:animalCat] drivers drvs1 [record:animalDrv]
[function:AniSetPreCullingLayer] useRNG uses11 [rng:rngAnimal]
[function:SysSetOutputValues] useRNG uses9 [rng:rngHabitat]
[treatment:trt] treats dm [field:isDispersalInformed]
	rank = java.lang.Integer(2)
	valueNames = au.edu.anu.rscs.aot.collections.tables.StringTable(([2]"Uninformed","Informed"))
	values = au.edu.anu.rscs.aot.collections.tables.StringTable(([2]"false","true"))
[treatment:trt] treats hp [field:isHabitatFragmented]
	rank = java.lang.Integer(4)
	valueNames = au.edu.anu.rscs.aot.collections.tables.StringTable(([2]"clumped","fragmented"))
	values = au.edu.anu.rscs.aot.collections.tables.StringTable(([2]"false","true"))
[treatment:trt] treats dd [field:isDispersalShort]
	rank = java.lang.Integer(1)
	valueNames = au.edu.anu.rscs.aot.collections.tables.StringTable(([2]"short","long"))
	values = au.edu.anu.rscs.aot.collections.tables.StringTable(([2]"true","false"))
[treatment:trt] treats hd [field:isHabitatDynamic]
	rank = java.lang.Integer(3)
	valueNames = au.edu.anu.rscs.aot.collections.tables.StringTable(([2]"dynamic","static"))
	values = au.edu.anu.rscs.aot.collections.tables.StringTable(([2]"true","false"))
[table:preCullLayer] sizedBy x3 [dimensioner:xdim]
	rank = java.lang.Integer(0)
[table:preCullLayer] sizedBy y3 [dimensioner:ydim]
	rank = java.lang.Integer(1)
[table:preDispersalLayer] sizedBy x6 [dimensioner:xdim]
	rank = java.lang.Integer(0)
[table:preDispersalLayer] sizedBy y6 [dimensioner:ydim]
	rank = java.lang.Integer(1)
[process:p1] appliesTo aplyTo1 [category:*arena*]
[process:p2] appliesTo aplyTo2 [category:animalCat]
[process:p2] dependsOn depsOn3 [process:p1]
[process:p2] inSpace in1 [space:landscape]
	searchRadius = java.lang.Double(0.0)
[process:p3] dependsOn depsOn2 [process:p2]
[process:p3] appliesTo aplyTo3 [category:animalCat]
[process:p3] inSpace in2 [space:landscape]
	searchRadius = java.lang.Double(0.0)
[process:p4] appliesTo aplyTo13 [category:animalCat]
[process:p4] dependsOn depsOn10 [process:p3A]
[process:p4] inSpace in4 [space:landscape]
	searchRadius = java.lang.Double(0.0)
[process:p5] appliesTo aplyTo6 [category:animalCat]
[process:p5] dependsOn depsOn11 [process:p4]
[process:p6] dependsOn depsOn4 [process:p5]
[process:p6] appliesTo aplyTo7 [category:*ephemeral*]
[process:p6] appliesTo aplyTo4 [category:animalCat]
[process:p6] inSpace in3 [space:landscape]
	searchRadius = java.lang.Double(0.0)
[process:p7] appliesTo aplyTo10 [category:animalCat]
[process:p7] dependsOn depsOn8 [process:p6]
[process:p8] dependsOn depsOn5 [process:p7]
[process:p8] appliesTo aplyTo8 [category:*arena*]
[initFunction:SysInit] useRNG uses13 [rng:rngHabitat]
[function:AniSetPreDispersalLayer] useRNG uses6 [rng:rngAnimal]
[category:*assemblage*] autoVar auto [record:AVPopulation]
[widget:occWriter] trackSeries trks32 [dataTracker:trkOccupancy]
[process:p3A] appliesTo aplyTo12 [category:animalCat]
[process:p3A] dependsOn depsOn1 [process:p3]
[widget:Fraction culled] trackSeries trks21 [dataTracker:trkFractionCulled]
[table:culledLayer] sizedBy y4 [dimensioner:ydim]
	rank = java.lang.Integer(1)
[table:culledLayer] sizedBy x4 [dimensioner:xdim]
	rank = java.lang.Integer(0)
[function:AniInitNewBorn] useRNG uses3 [rng:rngAnimal]
[initFunction:AniInit] useRNG uses4 [rng:rngAnimal]
[space:landscape] coordinate x2 [field:xLocation]
	rank = java.lang.Integer(0)
[space:landscape] coordinate y2 [field:yLocation]
	rank = java.lang.Integer(1)
[space:landscape] useRNG uses12 [rng:rngAnimal]